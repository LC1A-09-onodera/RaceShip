#pragma once
#define DIRECTINPUT_VERSION 0x0800 //DirectInputのバージョン指定
#include <dinput.h>
#include <memory>
#pragma comment(lib, "dinput8.lib")
#pragma comment(lib, "dxguid.lib")

enum class PadKeyCode
{
	ButtonNone = -1,
	UpButton = 0,
	DownButton,
	LeftButton,
	RightButton,
	Button01,
	Button02,
	Button03,
	Button04,
	ButtonLB,
	ButtonRB,
	ButtonSelect,
	ButtonPouse,
	ButtonKindMax,
};

class DirectInput final
{
public:
	/** @brief キーボタンの種類 */
	enum class ButtonKind
	{
		ButtonNone = -1,
		UpButton = 0,
		DownButton,
		LeftButton,
		RightButton,
		Button01,
		Button02,
		Button03,
		Button04,
		ButtonLB,
		ButtonRB,
		ButtonSelect,
		ButtonPouse,
		Button09,
		Button10,
		ButtonKindMax,
	};

	enum class ButtonState
	{
		ButtonStateNone,
		ButtonStateDown,
		ButtonStatePush,
		ButtonStateUp,
		ButtonStateMax,
	};

	//ゲームパッドデバイスの作成-デバイス列挙の結果を受け取る構造体
	struct DeviceEnumParameter
	{
		LPDIRECTINPUTDEVICE8 *GamePadDevice;
		int FindCount;
		~DeviceEnumParameter();
	};
private:
	// コンストラクタをprivateにする
	DirectInput() {};
	// デストラクタをprivateにする
	~DirectInput() {}
public:
	// コピーコンストラクタを無効にする
	DirectInput(const DirectInput& obj) = delete;
	// 代入演算子を無効にする
	const DirectInput& operator=(const DirectInput& obj) = delete;
	// インスタンスの取得
	static DirectInput* GetInstance();

	static HWND hwnd;

private: // 静的メンバ変数
	//static BYTE key[256];
	static IDirectInput8* dinput;

	static ButtonState g_ButtonStates[static_cast<int>(ButtonKind::ButtonKindMax)];
	static LPDIRECTINPUT8 g_InputInterface;							//!< DIRECTINPUT8のポインタ
	static LPDIRECTINPUTDEVICE8 g_GamePadDevice;					//!< DIRECTINPUTDEVICE8のポインタ

	static DIJOYSTATE pad_data;

	static const int unresponsive_range = 200;
	
	static BOOL CALLBACK DeviceFindCallBack(LPCDIDEVICEINSTANCE lpddi, LPVOID pvRef);
	static BOOL StartGamePadControl();
	static BOOL SetUpGamePadProperty(LPDIRECTINPUTDEVICE8 device);
	static BOOL SetUpCooperativeLevel(LPDIRECTINPUTDEVICE8 device);

public: // メンバ関数
	// 入力デバイスの初期化
	int InputInit(HINSTANCE hInstance, HWND hWnd);

	/**
	* @brief Input機能終了関数@n
	* Input機能を終了させる@n
	* ※EndEngineで実行されるので開発側が実行する必要はない
	*/
	void ReleaseInput();
	/**
	* @brief 入力情報の更新@n
	* デバイスの入力情報の更新を行う@n
	* 毎フレームに１度必ず実行する必要がある
	*/
	void UpdateInput();
	/**
	* @brief ボタンが押されているかの判定関数
	* @retval true：押されている
	* @retval false：押されていない
	* @param[in] button 判定したいボタンの種類
	*/
	static bool IsButtonPush(ButtonKind button);
	static bool IsButtonPush(PadKeyCode button);
	/**
	* @brief ボタンが押された瞬間の判定関数
	* @retval true：押した瞬間
	* @retval false：押した瞬間ではない
	* @param[in] button 判定したいボタンの種類
	*/
	static bool IsButtonUp(ButtonKind button);
	static bool IsButtonUp(PadKeyCode button);
	/**
	* @brief ボタンを離した瞬間の判定関数
	* @retval true：離した瞬間
	* @retval false：瞬間ではない
	* @param[in] button 判定したいボタンの種類
	*/
	bool IsButtonDown(ButtonKind button);
	bool IsButtonDown(PadKeyCode button);
	// 入力インターフェースの作成
	bool CreateInputInterface();
	// ゲームパッドデバイスの作成
	bool CreateGamePadDevice();
	// ゲームパッドの更新
	void UpdateGamePad();

	static float leftStickX();
	static float leftStickY();

	static float rightStickX();
	static float rightStickY();

	static float rightTriggerZ();

public:
	static float getLeftX();
	static float getLeftY();

	static float getRightX();
	static float getRightY();
	static float getTriggerZ();

};
